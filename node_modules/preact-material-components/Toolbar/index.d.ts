import { MDCToolbar } from '@material/toolbar';
import MaterialComponent from '../Base/MaterialComponent';
export interface IToolbarRowProps {
}
export interface IToolbarRowState {
}
export declare class ToolbarRow extends MaterialComponent<IToolbarRowProps, IToolbarRowState> {
    protected componentName: string;
    protected mdcProps: never[];
    protected materialDom(props: any): JSX.Element;
}
export interface IToolbarSectionProps {
    'align-start'?: boolean;
    'align-end'?: boolean;
    'shrink-to-fit'?: boolean;
}
export interface IToolbarSectionState {
}
export declare class ToolbarSection extends MaterialComponent<IToolbarSectionProps, IToolbarSectionState> {
    protected componentName: string;
    protected mdcProps: string[];
    protected materialDom(props: any): JSX.Element;
}
export interface IToolbarIconProps {
    menu?: boolean;
}
export interface IToolbarIconState {
}
export declare class ToolbarIcon extends MaterialComponent<IToolbarIconProps, IToolbarIconState> {
    protected componentName: string;
    protected mdcProps: never[];
    constructor(props: any);
    protected materialDom(props: any): JSX.Element;
}
export interface IToolbarTitleProps {
    title?: string;
}
export interface IToolbarTitleState {
}
export declare class ToolbarTitle extends MaterialComponent<IToolbarTitleProps, IToolbarTitleState> {
    protected componentName: string;
    protected mdcProps: never[];
    protected materialDom(props: any): JSX.Element;
}
export interface IToolbarProps {
    fixed?: boolean;
    'fixed-lastrow-only'?: boolean;
    waterfall?: boolean;
    flexible?: boolean;
    'flexible-default-behavior'?: boolean;
}
export interface IToolbarState {
}
export declare class Toolbar extends MaterialComponent<IToolbarProps, IToolbarState> {
    MDComponent?: MDCToolbar;
    protected componentName: string;
    protected mdcProps: string[];
    componentDidMount(): void;
    componentWillUnmount(): void;
    protected onChange(e: any): void;
    protected materialDom(props: any): JSX.Element;
}
export default class extends Toolbar {
    static readonly Section: typeof ToolbarSection;
    static readonly Icon: typeof ToolbarIcon;
    static readonly Title: typeof ToolbarTitle;
    static readonly Row: typeof ToolbarRow;
}
