"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
function isFile(file) {
    try {
        return fs_1.statSync(file).isFile();
    }
    catch (e) {
        return false;
    }
}
function isDir(file) {
    try {
        return fs_1.statSync(file).isDirectory();
    }
    catch (e) {
        return false;
    }
}
function simpleResolveSass(path) {
    if (isFile(path)) {
        return path;
    }
    const d = path_1.dirname(path);
    const f = path_1.basename(path);
    const prefixes = ['', '_'];
    const subPaths = ['', '/index'];
    const extensions = ['.scss', '.css'];
    for (const prefix of prefixes) {
        for (const subPath of subPaths) {
            for (const extension of extensions) {
                const file = path_1.join(d, `${prefix}${f}${subPath}${extension}`);
                if (isFile(file)) {
                    return file;
                }
            }
        }
    }
}
function findInModules(modsPath, url) {
    const segments = url.split('/');
    let module = segments[0];
    if (module.startsWith('@')) {
        if (segments.length < 2) {
            return new Error('Module group have to consist of at least 2 segments (e.g. ~@group/module)');
        }
        module = `${segments[0]}/${segments[1]}`;
    }
    const modPath = path_1.resolve(modsPath, module);
    if (!isDir(modPath)) {
        return;
    }
    const simplePath = path_1.resolve(modsPath, url);
    const simpleRes = simpleResolveSass(simplePath);
    if (simpleRes) {
        return simpleRes;
    }
    if (module === url) {
        const packageJson = require(path_1.join(modPath, 'package.json'));
        if (packageJson.sass) {
            return simpleResolveSass(path_1.join(modPath, packageJson.sass));
        }
    }
}
function nodeResolveSass(url, prev) {
    const prevDir = path_1.dirname(prev);
    const count = prevDir.split('/').length;
    for (let i = 0; i < count; i++) {
        const pars = Array.from(Array(i).keys())
            .map(() => '..')
            .join('/');
        const searchPath = path_1.resolve(prevDir, pars, 'node_modules');
        if (isDir(searchPath)) {
            const result = findInModules(searchPath, url);
            if (result) {
                if (typeof result === 'string') {
                    return { file: result };
                }
                else {
                    return result;
                }
            }
        }
    }
    return new Error(`Cannot resolve ~${url}`);
}
/**
 * Resolves a sass import
 *
 * @param {string} url - the path in import as-is, which LibSass encountered
 * @param {string} prev - the previously resolved path
 */
function sassResolver(url, prev) {
    const relPath = path_1.resolve(path_1.dirname(prev), url);
    try {
        if (url.startsWith('.') || url.startsWith('~/') || url.startsWith('/')) {
            const res = simpleResolveSass(relPath);
            if (res) {
                return { file: res };
            }
            else {
                return new Error(`Cannot resolve ${url}`);
            }
        }
        else if (url.startsWith('~')) {
            return nodeResolveSass(url.slice(1), prev);
        }
        else {
            const res = simpleResolveSass(relPath);
            if (res) {
                return { file: res };
            }
            return nodeResolveSass(url, prev);
        }
    }
    catch (e) {
        return e;
    }
}
exports.sassResolver = sassResolver;
